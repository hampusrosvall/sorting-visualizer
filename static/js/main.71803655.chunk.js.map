{"version":3,"sources":["sortingAlgorithms/heapSort.js","sortingAlgorithms/quickSort.js","sortingAlgorithms/mergeSort.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["bubbleDown","startIdx","endIdx","heap","informations","childTwo","largestChild","currentIdx","childOne","info","left","right","swap","leftHeight","rightHeight","push","i","j","a","temp","heapSort","array","parentIdx","Math","floor","length","buildMaxHeap","tmp","quickSort","comparisons","quickSortHelper","pivotIdx","strategy","generatePivotIdx","currentComp","finalSwap","fillRemaining","mainArrayIdx","mainArray","helperArray","animations","informationObject","leftComparison","rightComparison","insertAt","insertHeight","mergeSort","slice","mergeSortHelper","middleIdx","k","doMerge","SortingVisualizer","props","state","this","resetArray","document","body","style","backgroundColor","lowerBound","upperBound","random","setState","arrayBars","getElementsByClassName","buttons","querySelectorAll","Array","prototype","map","call","button","disabled","disableButtons","testSortingAlgorithm","comparison","didSwap","updateColors","sleep","SPEED","leftStyle","rightStyle","height","enableButtons","information","animation","insertAtStyle","className","value","index","key","onClick","React","Component","sortedArray","unSortedArray","buildInSort","sort","b","console","log","JSON","stringify","firstIdx","secondIdx","bars","color","firstBarStyle","secondBarStyle","ms","Promise","resolve","setTimeout","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.71803655.chunk.js","sourcesContent":["export const heapSort = (array) => {\n  let informations = [];\n  buildMaxHeap(array, informations);\n\n  for (let endIdx = array.length - 1; endIdx > 0; endIdx--) {\n    let info = {\n      left: 0,\n      right: endIdx,\n      swap: true,\n      leftHeight: array[0],\n      rightHeight: array[endIdx],\n    };\n    informations.push(info);\n    swap(0, endIdx, array);\n    bubbleDown(0, endIdx - 1, array, informations);\n  }\n\n  return [informations, array];\n};\n\nfunction buildMaxHeap(array, informations) {\n  let parentIdx = Math.floor((array.length - 1) / 2);\n  let endIdx = array.length - 1;\n  while (parentIdx >= 0) {\n    bubbleDown(parentIdx--, endIdx, array, informations);\n  }\n}\n\nfunction bubbleDown(startIdx, endIdx, heap, informations) {\n  let currentIdx = startIdx;\n  let childOne = 2 * startIdx + 1;\n  let childTwo, largestChild;\n\n  while (childOne <= endIdx) {\n    childTwo = childOne + 1 <= endIdx ? childOne + 1 : -1;\n\n    if (childTwo !== -1 && heap[childTwo] > heap[childOne]) {\n      largestChild = childTwo;\n    } else {\n      largestChild = childOne;\n    }\n\n    let info = {\n      left: currentIdx,\n      right: largestChild,\n      swap: false,\n      leftHeight: -1,\n      rightHeight: -1,\n    };\n    if (heap[largestChild] > heap[currentIdx]) {\n      info.swap = true;\n      info.leftHeight = heap[currentIdx];\n      info.rightHeight = heap[largestChild];\n      informations.push(info);\n      swap(currentIdx, largestChild, heap);\n      currentIdx = largestChild;\n      childOne = 2 * currentIdx + 1;\n    } else {\n      informations.push(info);\n      return;\n    }\n  }\n}\n\nfunction swap(i, j, a) {\n  const temp = a[j];\n  a[j] = a[i];\n  a[i] = temp;\n}\n\nexport default heapSort;\n","export const quickSort = (array) => {\n  let comparisons = [];\n  quickSortHelper(0, array.length - 1, array, comparisons);\n  return [comparisons, array];\n};\n\nfunction quickSortHelper(startIdx, endIdx, array, comparisons) {\n  if (startIdx >= endIdx) {\n    return;\n  }\n  const pivotIdx = generatePivotIdx(startIdx, endIdx, \"first\");\n\n  let left = startIdx + 1,\n    right = endIdx;\n  while (left <= right) {\n    let currentComp = {\n      left: left,\n      right: right,\n      swap: false,\n      leftHeight: -1,\n      rightHeight: -1,\n    };\n\n    if (array[left] > array[pivotIdx] && array[right] < array[pivotIdx]) {\n      currentComp.swap = true;\n      currentComp.leftHeight = array[left];\n      currentComp.rightHeight = array[right];\n      swap(left, right, array);\n    }\n    if (array[left] <= array[pivotIdx]) left++;\n    if (array[right] >= array[pivotIdx]) right--;\n\n    comparisons.push(currentComp);\n  }\n\n  const finalSwap = {\n    left: pivotIdx,\n    right: right,\n    swap: true,\n    leftHeight: array[pivotIdx],\n    rightHeight: array[right],\n  };\n  comparisons.push(finalSwap);\n  swap(right, pivotIdx, array);\n\n  quickSortHelper(startIdx, right - 1, array, comparisons);\n  quickSortHelper(right + 1, endIdx, array, comparisons);\n}\n\nfunction generatePivotIdx(startIdx, endIdx, strategy) {\n  if (strategy === \"first\") return startIdx;\n}\n\nfunction swap(i, j, a) {\n  const tmp = a[i];\n  a[i] = a[j];\n  a[j] = tmp;\n}\n\nexport default quickSort;\n","export const mergeSort = (array) => {\n  if (array.length <= 1) return array;\n\n  let animations = [];\n  let helperArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, helperArray, animations);\n\n  return animations;\n};\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, helperArray, animations) {\n  if (startIdx === endIdx) return;\n\n  let middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(helperArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(helperArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, helperArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  helperArray,\n  animations\n) {\n  let i = startIdx;\n  let k = startIdx;\n  let j = middleIdx + 1;\n\n  let informationObject;\n\n  while (i <= middleIdx && j <= endIdx) {\n    if (helperArray[i] <= helperArray[j]) {\n      informationObject = {\n        leftComparison: i,\n        rightComparison: j,\n        insertAt: k,\n        insertHeight: helperArray[i],\n      };\n      mainArray[k++] = helperArray[i++];\n    } else {\n      informationObject = {\n        leftComparison: i,\n        rightComparison: j,\n        insertAt: k,\n        insertHeight: helperArray[j],\n      };\n      mainArray[k++] = helperArray[j++];\n    }\n    animations.push(informationObject);\n  }\n\n  fillRemaining(i, middleIdx, k, mainArray, helperArray, animations);\n  fillRemaining(j, endIdx, k, mainArray, helperArray, animations);\n}\n\nfunction fillRemaining(\n  startIdx,\n  endIdx,\n  mainArrayIdx,\n  mainArray,\n  helperArray,\n  animations\n) {\n  while (startIdx <= endIdx) {\n    let informationObject = {\n      leftComparison: startIdx,\n      rightComparison: startIdx,\n      insertAt: mainArrayIdx,\n      insertHeight: helperArray[startIdx],\n    };\n    mainArray[mainArrayIdx++] = helperArray[startIdx++];\n    animations.push(informationObject);\n  }\n}\n\nexport default mergeSort;\n","import React from \"react\";\nimport \"./SortingVisualizer.css\";\nimport heapSort from \"../sortingAlgorithms/heapSort.js\";\nimport quickSort from \"../sortingAlgorithms/quickSort.js\";\nimport mergeSort from \"../sortingAlgorithms/mergeSort.js\";\n\nconst LOWERBOUND = 5;\nconst UPPERBOUND = 650;\nconst SIZE = 100;\nconst STANDARD_COLOR = \"turquoise\";\nconst COMPARING_COLOR = \"red\";\nconst SPEED = 10;\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n    document.body.style.backgroundColor = \"whitesmoke\";\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < SIZE; i++) {\n      array.push(generateRandomNumber(LOWERBOUND, UPPERBOUND));\n    }\n    this.setState({ array: array });\n\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    for (let bar of arrayBars) {\n      bar.style.backgroundColor = STANDARD_COLOR;\n    }\n  }\n\n  disableButtons() {\n    let buttons = document.querySelectorAll(\"button\");\n    Array.prototype.map.call(buttons, (button) => (button.disabled = true));\n  }\n\n  enableButtons() {\n    let buttons = document.querySelectorAll(\"button\");\n    Array.prototype.map.call(buttons, (button) => (button.disabled = false));\n  }\n\n  async quickSort() {\n    this.disableButtons();\n    const [comparisons, sortedArray] = quickSort(this.state.array.slice());\n    testSortingAlgorithm(sortedArray, this.state.array.slice());\n\n    for (let comparison of comparisons) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const left = comparison.left;\n      const right = comparison.right;\n      const didSwap = comparison.swap;\n\n      updateColors(left, right, arrayBars, COMPARING_COLOR);\n      if (didSwap) {\n        await sleep(SPEED * 3);\n        const leftHeight = comparison.leftHeight;\n        const rightHeight = comparison.rightHeight;\n        let leftStyle = arrayBars[left].style;\n        let rightStyle = arrayBars[right].style;\n        leftStyle.height = `${rightHeight}px`;\n        rightStyle.height = `${leftHeight}px`;\n      }\n      updateColors(left, right, arrayBars, STANDARD_COLOR);\n    }\n    this.enableButtons();\n  }\n\n  async heapSort() {\n    this.disableButtons();\n    const [information, sortedArray] = heapSort(this.state.array.slice());\n    testSortingAlgorithm(sortedArray, this.state.array.slice());\n\n    for (let info of information) {\n      const left = info.left;\n      const right = info.right;\n      const didSwap = info.swap;\n\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n\n      updateColors(left, right, arrayBars, COMPARING_COLOR);\n      if (didSwap) {\n        await sleep(SPEED);\n        let leftStyle = arrayBars[left].style;\n        let rightStyle = arrayBars[right].style;\n        let leftHeight = info.leftHeight;\n        let rightHeight = info.rightHeight;\n        leftStyle.height = `${rightHeight}px`;\n        rightStyle.height = `${leftHeight}px`;\n      }\n      updateColors(left, right, arrayBars, STANDARD_COLOR);\n    }\n    this.enableButtons();\n  }\n\n  async mergeSort() {\n    this.disableButtons();\n    const animations = mergeSort(this.state.array.slice());\n\n    for (let animation of animations) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const leftComparison = animation.leftComparison;\n      const rightComparison = animation.rightComparison;\n      const insertAt = animation.insertAt;\n      const insertHeight = animation.insertHeight;\n\n      updateColors(leftComparison, rightComparison, arrayBars, COMPARING_COLOR);\n      let insertAtStyle = arrayBars[insertAt].style;\n\n      await sleep(SPEED);\n      insertAtStyle.height = `${insertHeight}px`;\n      updateColors(leftComparison, rightComparison, arrayBars, STANDARD_COLOR);\n    }\n    this.enableButtons();\n  }\n\n  render() {\n    const { array } = this.state;\n    return (\n      <div className=\"background\">\n        <div className=\"array-container\">\n          {array.map((value, index) => (\n            <div\n              className=\"array-bar\"\n              key={index}\n              style={{ height: `${value}px` }}\n            ></div>\n          ))}\n        </div>\n        <button className=\"button\" onClick={() => this.resetArray()}>\n          Generate new array\n        </button>\n        <button className=\"button\" onClick={() => this.heapSort()}>\n          Heap Sort\n        </button>\n        <button className=\"button\" onClick={() => this.quickSort()}>\n          Quick Sort\n        </button>\n        <button className=\"button\" onClick={() => this.mergeSort()}>\n          Merge Sort\n        </button>\n      </div>\n    );\n  }\n}\n\nfunction generateRandomNumber(lowerBound, upperBound) {\n  return Math.floor(Math.random() * (upperBound - lowerBound + 1) + lowerBound);\n}\n\nfunction testSortingAlgorithm(sortedArray, unSortedArray) {\n  const buildInSort = unSortedArray.slice().sort((a, b) => a - b);\n  console.log(JSON.stringify(sortedArray) === JSON.stringify(buildInSort));\n}\n\nfunction updateColors(firstIdx, secondIdx, bars, color) {\n  const firstBarStyle = bars[firstIdx].style;\n  const secondBarStyle = bars[secondIdx].style;\n  firstBarStyle.backgroundColor = color;\n  secondBarStyle.backgroundColor = color;\n}\n\nfunction sleep(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer'\n\nfunction App() {\n  return (\n    <div className=\"background\">\n    <div className=\"App\">\n      <SortingVisualizer> </SortingVisualizer>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}